!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Tsumami=t():e.Tsumami=t()}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,l=!0,s=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){s=!0,a=e},f:function(){try{l||null==r.return||r.return()}finally{if(s)throw a}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.r(t),r.d(t,"default",(function(){return b}));var o=function(e){return e+"px"},a=function(e){return e+"deg"},l=function(e){return"rotate("+a(Math.floor(e))+")"},s=function(e){return"skewY("+a(Math.floor(e))+")"},u=function(e){var t,r="",i=n(e);try{for(i.s();!(t=i.n()).done;){r+=t.value+" "}}catch(e){i.e(e)}finally{i.f()}return r};function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function f(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){d(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function m(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}var b=function e(t){var r,n,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),h.set(this,{writable:!0,value:void 0}),v.set(this,{writable:!0,value:void 0}),w.set(this,{writable:!0,value:void 0}),g.set(this,{writable:!0,value:void 0}),M.set(this,{writable:!0,value:void 0}),y.set(this,{writable:!0,value:void 0}),k.set(this,{writable:!0,value:void 0}),O.set(this,{writable:!0,value:void 0}),W.set(this,{writable:!0,value:void 0}),j.set(this,{writable:!0,value:void 0}),E.set(this,{writable:!0,value:void 0}),P.set(this,{writable:!0,value:void 0}),S.set(this,{writable:!0,value:void 0}),x.set(this,{writable:!0,value:function(){i.meterbg=document.createElement("div"),i.pie=document.createElement("ul"),i.meterbghole=document.createElement("div"),i.meterbgholeout=document.createElement("div"),i.tsumami=document.createElement("div"),i.point=document.createElement("div"),i.sliceMeterBg=[],i.sliceMeterBgContents=[],i.sliceMeter=[],i.sliceMeterContents=[]}}),B.set(this,{writable:!0,value:function(){p(i,T).call(i,p(i,v),{center:!1,position:"relative",width:o(p(i,h)),height:o(p(i,h)),background:p(i,w)}),p(i,T).call(i,i.meterbg,{center:!0,borderRadius:"50%",background:p(i,M),width:o(p(i,h)/p(i,O)),height:o(p(i,h)/p(i,O))},"tsumami-meterbg",p(i,v)),p(i,T).call(i,i.pie,{center:!1,overflow:"hidden",borderRadius:"50%",position:"absolute",padding:0,margin:0,width:o(p(i,h)),height:o(p(i,h)),left:o((p(i,h)-p(i,h)/p(i,O))/-2),top:o((p(i,h)-p(i,h)/p(i,O))/-2)},"tsumami-meter",i.meterbg),p(i,Y).call(i,p(i,k)),p(i,_).call(i,p(i,k)),p(i,T).call(i,i.meterbghole,{center:!0,borderRadius:"50%",width:o(p(i,h)/p(i,O)-p(i,y)),height:o(p(i,h)/p(i,O)-p(i,y)),background:p(i,w)},"tsumami-meterhole",i.meterbg),p(i,T).call(i,i.meterbgholeout,{center:!1,position:"absolute",borderRadius:"50%",width:o(p(i,h)/p(i,O)),height:o(p(i,h)/p(i,O)),background:"rgba(0,0,0,0)",border:u(["solid",o((p(i,h)-p(i,h)/p(i,O))/2),p(i,w)]),margin:0,top:"50%",left:"50%",transform:u(["translateX(-50%)","translateY(-50%)"])},"tsumami-meterhole-out",i.meterbg),p(i,T).call(i,i.tsumami,{center:!0,userSelect:"none",width:o(p(i,h)/2),height:o(p(i,h)/2),background:p(i,g),borderRadius:"50%",transform:l(p(i,k)/-2)},"tsumami-inner",p(i,v)),p(i,T).call(i,i.point,{center:!0,width:"10%",height:"20%",background:p(i,S),transform:"translateY(-100%)"},"tsumami-point",i.tsumami),p(i,D).call(i,i.tsumami)}}),C.set(this,{writable:!0,value:function(){return{position:"absolute",top:0,right:0,bottom:0,left:0,margin:"auto"}}}),T.set(this,{writable:!0,value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;for(var o in void 0!==r&&(e.className=r),t.center&&(t=Object.assign(p(i,C).call(i),t)),delete t.center,t)e.style[o]=t[o];void 0!==n&&n.appendChild(e)}}),A.set(this,{writable:!0,value:{center:!1,overflow:"hidden",position:"absolute",width:"50%",height:"50%",transformOrigin:"0% 100%"}}),R.set(this,{writable:!0,value:{center:!1,position:"absolute",left:"-100%",borderRadius:"50%",width:"200%",height:"200%"}}),Y.set(this,{writable:!0,value:function(e){for(var t=(e=e>360?0:360-e)/90+(e%90==0?0:1),r=0;r<t;r++){var n=0;0!=e?(e>=90?(n=90,e-=90):(n=e,e=0),i.sliceMeterBg[r]=document.createElement("li"),i.sliceMeterBgContents[r]=document.createElement("div"),p(i,T).call(i,i.sliceMeterBg[r],f(f({},p(i,A)),{},{top:0,right:0,transform:u([l(n/-2+180-45*r+e/2),s(-90+n)])}),"sliceMeterBg",i.pie),p(i,T).call(i,i.sliceMeterBgContents[r],f(f({},p(i,R)),{},{background:p(i,w),transform:s(90-n)}),"sliceMeterBg-contents",i.sliceMeterBg[r])):(i.sliceMeterBg[r]="",i.sliceMeterBgContents[r]="")}}}),_.set(this,{writable:!0,value:function(e){var t=e/90+(e%90==0?0:1);e=e>360?0:360-e;for(var r=[{top:o(0),right:o(-1)},{top:o(1),right:o(0)},{top:o(0),right:o(1)},{top:o(-1),right:o(0)}],n=0;n<t;n++)i.sliceMeter[n]=document.createElement("li"),i.sliceMeterContents[n]=document.createElement("div"),p(i,T).call(i,i.sliceMeter[n],f(f({},p(i,A)),{},{transform:u([l(180+90*n+e/2),s(-90)])},r[n]),"sliceMeter",i.pie),p(i,T).call(i,i.sliceMeterContents[n],f(f({},p(i,R)),{},{background:p(i,P),transform:s(90)}),"sliceMeter-contents",i.sliceMeter[n])}}),D.set(this,{writable:!0,value:function(e){m(i,I,!1),m(i,L,0),e.addEventListener("mousedown",p(i,z),!1),window.addEventListener("mousemove",(function(t){p(i,U).call(i,t,e)}),!1),window.addEventListener("mouseup",p(i,N),!1)}}),I.set(this,{writable:!0,value:void 0}),L.set(this,{writable:!0,value:void 0}),z.set(this,{writable:!0,value:function(e){m(i,I,!0),m(i,L,e.clientY),console.log("MouseDown")}}),U.set(this,{writable:!0,value:function(e,t){if(p(i,I)){var r=function(e,t){var r=t+"(";return+e.replace(r,"").replace("deg)","")}(t.style.transform,"rotate")+3*(e.clientY-p(i,L));r<-p(i,k)/2?r=-p(i,k)/2:r>p(i,k)/2&&(r=p(i,k)/2);var n=p(i,q).call(i,r,-p(i,k)/2,p(i,k)/2);t.style.transform=l(n),m(i,L,e.clientY),p(i,$).call(i,r+p(i,k)/2,i.sliceMeter,i.sliceMeterContents),p(i,X).value=(p(i,j)-p(i,W))*(r+p(i,k)/2)/p(i,k),console.log("MouseMove")}}}),N.set(this,{writable:!0,value:function(e){m(i,I,!1),console.log("MouseUp")}}),X.set(this,{writable:!0,value:(r=Object.create(null),n=0,Object.defineProperty(r,"value",{set:function(e){""!==p(i,E)&&(p(i,E).value=e),n=e},get:function(){return n}}),r)}),$.set(this,{writable:!0,value:function(e,t,r){for(var n=0;n<i.sliceMeter.length;n++){var o=0;e>=90?(o=90,e-=90):(o=e,e=0);var a=t[n].style.transform.split(" ");t[n].style.transform=u([a[0],s(-90+o)]),r[n].style.transform=s(90-o)}}}),q.set(this,{writable:!0,value:function(e,t,r){return e<t?e=t:e>r&&(e=r),e}}),m(this,h,(t=void 0===t?{}:t).size||100),m(this,v,t.target||document.getElementById("tsumami")),m(this,w,t.bgcolor||"red"),m(this,g,t.tmmcolor||"yellow"),m(this,M,t.mbgcolor||"black"),m(this,y,t.meterSize||10),m(this,k,t.degree||270),m(this,O,t.scale||1.2),m(this,W,t.min||0),m(this,j,t.max||100),m(this,E,t.obj||""),m(this,P,t.mcolor||"blue"),m(this,S,t.point||"purple"),p(this,x).call(this),p(this,B).call(this)},h=new WeakMap,v=new WeakMap,w=new WeakMap,g=new WeakMap,M=new WeakMap,y=new WeakMap,k=new WeakMap,O=new WeakMap,W=new WeakMap,j=new WeakMap,E=new WeakMap,P=new WeakMap,S=new WeakMap,x=new WeakMap,B=new WeakMap,C=new WeakMap,T=new WeakMap,A=new WeakMap,R=new WeakMap,Y=new WeakMap,_=new WeakMap,D=new WeakMap,I=new WeakMap,L=new WeakMap,z=new WeakMap,U=new WeakMap,N=new WeakMap,X=new WeakMap,$=new WeakMap,q=new WeakMap;d(b,"testlog",(function(){console.log("testlog")}))}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,