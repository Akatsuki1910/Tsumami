!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Tsumami=t():e.Tsumami=t()}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/cssFunc.js":
/*!************************!*\
  !*** ./src/cssFunc.js ***!
  \************************/
/*! exports provided: _px, _deg, _rotate, _skewY, _whileSpace, _returnTransformValue */function(e,t,r){"use strict";function n(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,s=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){s=!0,o=e},f:function(){try{l||null==r.return||r.return()}finally{if(s)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.r(t),r.d(t,"_px",(function(){return a})),r.d(t,"_deg",(function(){return o})),r.d(t,"_rotate",(function(){return l})),r.d(t,"_skewY",(function(){return s})),r.d(t,"_whileSpace",(function(){return u})),r.d(t,"_returnTransformValue",(function(){return c}));var a=function(e){return e+"px"},o=function(e){return e+"deg"},l=function(e){return"rotate("+o(Math.floor(e))+")"},s=function(e){return"skewY("+o(Math.floor(e))+")"},u=function(e){var t,r="",i=n(e);try{for(i.s();!(t=i.n()).done;){r+=t.value+" "}}catch(e){i.e(e)}finally{i.f()}return r},c=function(e,t){var r=t+"(";return+e.replace(r,"").replace("deg)","")}},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return u}));var n=r(/*! ./cssFunc */"./src/cssFunc.js");function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function s(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}var u=function e(t){var r,i,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c.set(this,{writable:!0,value:void 0}),f.set(this,{writable:!0,value:void 0}),p.set(this,{writable:!0,value:void 0}),d.set(this,{writable:!0,value:void 0}),h.set(this,{writable:!0,value:void 0}),m.set(this,{writable:!0,value:void 0}),v.set(this,{writable:!0,value:void 0}),b.set(this,{writable:!0,value:void 0}),w.set(this,{writable:!0,value:void 0}),g.set(this,{writable:!0,value:void 0}),y.set(this,{writable:!0,value:void 0}),M.set(this,{writable:!0,value:void 0}),_.set(this,{writable:!0,value:void 0}),k.set(this,{writable:!0,value:void 0}),x.set(this,{writable:!0,value:function(){o.meterbg=document.createElement("div"),o.pie=document.createElement("ul"),o.meterbghole=document.createElement("div"),o.meterbgholeout=document.createElement("div"),o.tsumami=document.createElement("div"),o.point=document.createElement("div"),o.sliceMeterBg=[],o.sliceMeterBgContents=[],o.sliceMeter=[],o.sliceMeterContents=[]}}),j.set(this,{writable:!0,value:function(){l(o,W).call(o,l(o,f),{center:!1,position:"relative",width:n._px(l(o,c)),height:n._px(l(o,c)),background:l(o,p)}),l(o,W).call(o,o.meterbg,{center:!0,borderRadius:"50%",background:l(o,h),width:n._px(l(o,c)/l(o,b)),height:n._px(l(o,c)/l(o,b))},"tsumami-meterbg",l(o,f)),l(o,W).call(o,o.pie,{center:!1,overflow:"hidden",borderRadius:"50%",position:"absolute",padding:0,margin:0,width:n._px(l(o,c)),height:n._px(l(o,c)),left:n._px((l(o,c)-l(o,c)/l(o,b))/-2),top:n._px((l(o,c)-l(o,c)/l(o,b))/-2)},"tsumami-meter",o.meterbg),l(o,P).call(o,l(o,v)),l(o,Y).call(o,l(o,v)),l(o,W).call(o,o.meterbghole,{center:!0,borderRadius:"50%",width:n._px(l(o,c)/l(o,b)-l(o,m)),height:n._px(l(o,c)/l(o,b)-l(o,m)),background:l(o,p)},"tsumami-meterhole",o.meterbg),l(o,W).call(o,o.meterbgholeout,{center:!1,position:"absolute",borderRadius:"50%",width:n._px(l(o,c)/l(o,b)),height:n._px(l(o,c)/l(o,b)),background:"rgba(0,0,0,0)",border:n._whileSpace(["solid",n._px((l(o,c)-l(o,c)/l(o,b))/2),l(o,p)]),margin:0,top:"50%",left:"50%",transform:n._whileSpace(["translateX(-50%)","translateY(-50%)"])},"tsumami-meterhole-out",o.meterbg),l(o,W).call(o,o.tsumami,{center:!0,userSelect:"none",width:n._px(l(o,c)/2),height:n._px(l(o,c)/2),background:l(o,d),borderRadius:"50%",transform:n._rotate(l(o,v)/-2)},"tsumami-inner",l(o,f)),l(o,W).call(o,o.point,{center:!0,width:"10%",height:"20%",background:l(o,_),transform:"translateY(-100%)"},"tsumami-point",o.tsumami),l(o,B).call(o,o.tsumami);var e=l(o,k)*l(o,v)/(l(o,g)-l(o,w));l(o,L).call(o,e),o.tsumami.style.transform=n._rotate(e-l(o,v)/2),l(o,I).value=l(o,k)}}),O.set(this,{writable:!0,value:function(){return{position:"absolute",top:0,right:0,bottom:0,left:0,margin:"auto"}}}),W.set(this,{writable:!0,value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;for(var i in void 0!==r&&(e.className=r),t.center&&(t=Object.assign(l(o,O).call(o),t)),delete t.center,t)e.style[i]=t[i];void 0!==n&&n.appendChild(e)}}),E.set(this,{writable:!0,value:{center:!1,overflow:"hidden",position:"absolute",width:"50%",height:"50%",transformOrigin:"0% 100%"}}),S.set(this,{writable:!0,value:{center:!1,position:"absolute",left:"-100%",borderRadius:"50%",width:"200%",height:"200%"}}),P.set(this,{writable:!0,value:function(e){for(var t=(e=e>360?0:360-e)/90+(e%90==0?0:1),r=0;r<t;r++){var i=0;0!=e?(e>=90?(i=90,e-=90):(i=e,e=0),o.sliceMeterBg[r]=document.createElement("li"),o.sliceMeterBgContents[r]=document.createElement("div"),l(o,W).call(o,o.sliceMeterBg[r],a(a({},l(o,E)),{},{top:0,right:0,transform:n._whileSpace([n._rotate(i/-2+180-45*r+e/2),n._skewY(-90+i)])}),"sliceMeterBg",o.pie),l(o,W).call(o,o.sliceMeterBgContents[r],a(a({},l(o,S)),{},{background:l(o,p),transform:n._skewY(90-i)}),"sliceMeterBg-contents",o.sliceMeterBg[r])):(o.sliceMeterBg[r]="",o.sliceMeterBgContents[r]="")}}}),Y.set(this,{writable:!0,value:function(e){var t=e/90+(e%90==0?0:1);e=e>360?0:360-e;for(var r=[{top:n._px(0),right:n._px(-1)},{top:n._px(1),right:n._px(0)},{top:n._px(0),right:n._px(1)},{top:n._px(-1),right:n._px(0)}],i=0;i<t;i++)o.sliceMeter[i]=document.createElement("li"),o.sliceMeterContents[i]=document.createElement("div"),l(o,W).call(o,o.sliceMeter[i],a(a({},l(o,E)),{},{transform:n._whileSpace([n._rotate(180+90*i+e/2),n._skewY(-90)])},r[i]),"sliceMeter",o.pie),l(o,W).call(o,o.sliceMeterContents[i],a(a({},l(o,S)),{},{background:l(o,M),transform:n._skewY(90)}),"sliceMeter-contents",o.sliceMeter[i])}}),B.set(this,{writable:!0,value:function(e){s(o,C,!1),s(o,T,0),e.addEventListener("mousedown",l(o,A),!1),window.addEventListener("mousemove",(function(t){l(o,R).call(o,t,e)}),!1),window.addEventListener("mouseup",l(o,D),!1)}}),C.set(this,{writable:!0,value:void 0}),T.set(this,{writable:!0,value:void 0}),A.set(this,{writable:!0,value:function(e){s(o,C,!0),s(o,T,e.clientY)}}),R.set(this,{writable:!0,value:function(e,t){if(l(o,C)){var r=n._returnTransformValue(t.style.transform,"rotate")+3*(e.clientY-l(o,T)),i=l(o,z).call(o,r,-l(o,v)/2,l(o,v)/2);t.style.transform=n._rotate(i),s(o,T,e.clientY),l(o,L).call(o,i+l(o,v)/2),l(o,I).value=(l(o,g)-l(o,w))*(i+l(o,v)/2)/l(o,v)+l(o,w)}}}),D.set(this,{writable:!0,value:function(e){s(o,C,!1)}}),I.set(this,{writable:!0,value:(r=Object.create(null),i=0,Object.defineProperty(r,"value",{set:function(e){""!==l(o,y)&&(l(o,y).value=e),i=e},get:function(){return i}}),r)}),L.set(this,{writable:!0,value:function(e){for(var t=o.sliceMeter,r=o.sliceMeterContents,i=0;i<o.sliceMeter.length;i++){var a=0;e>=90?(a=90,e-=90):(a=e,e=0);var l=t[i].style.transform.split(" ");t[i].style.transform=n._whileSpace([l[0],n._skewY(-90+a)]),r[i].style.transform=n._skewY(90-a)}}}),z.set(this,{writable:!0,value:function(e,t,r){return e<t?e=t:e>r&&(e=r),e}}),s(this,c,(t=void 0===t?{}:t).size||100),s(this,f,t.target||document.getElementById("tsumami")),s(this,p,t.bgcolor||"red"),s(this,d,t.tmmcolor||"yellow"),s(this,h,t.mbgcolor||"black"),s(this,m,t.meterSize||10),s(this,v,t.degree||270),s(this,b,t.scale||1.2),s(this,w,t.min||0),s(this,g,t.max||100),s(this,y,t.obj||""),s(this,M,t.mcolor||"blue"),s(this,_,t.point||"purple"),s(this,k,t.value||l(this,w)),l(this,x).call(this),l(this,j).call(this)},c=new WeakMap,f=new WeakMap,p=new WeakMap,d=new WeakMap,h=new WeakMap,m=new WeakMap,v=new WeakMap,b=new WeakMap,w=new WeakMap,g=new WeakMap,y=new WeakMap,M=new WeakMap,_=new WeakMap,k=new WeakMap,x=new WeakMap,j=new WeakMap,O=new WeakMap,W=new WeakMap,E=new WeakMap,S=new WeakMap,P=new WeakMap,Y=new WeakMap,B=new WeakMap,C=new WeakMap,T=new WeakMap,A=new WeakMap,R=new WeakMap,D=new WeakMap,I=new WeakMap,L=new WeakMap,z=new WeakMap;o(u,"testlog",(function(){console.log("testlog")}))}}).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Uc3VtYW1pL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9Uc3VtYW1pL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1RzdW1hbWkvLi9zcmMvY3NzRnVuYy5qcyIsIndlYnBhY2s6Ly9Uc3VtYW1pLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX3B4IiwibnVtIiwiX2RlZyIsIl9yb3RhdGUiLCJNYXRoIiwiZmxvb3IiLCJfc2tld1kiLCJfd2hpbGVTcGFjZSIsIm9iaiIsInJldHVybk9iaiIsIl9yZXR1cm5UcmFuc2Zvcm1WYWx1ZSIsImVsZW1lbnQiLCJ0TmFtZSIsInJlcGxhY2UiLCJUc3VtYW1pIiwic2V0dGluZ3MiLCJ2YWwiLCJtZW1WYWx1ZSIsIm1ldGVyYmciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJwaWUiLCJtZXRlcmJnaG9sZSIsIm1ldGVyYmdob2xlb3V0IiwidHN1bWFtaSIsInBvaW50Iiwic2xpY2VNZXRlckJnIiwic2xpY2VNZXRlckJnQ29udGVudHMiLCJzbGljZU1ldGVyIiwic2xpY2VNZXRlckNvbnRlbnRzIiwiY2VudGVyIiwicG9zaXRpb24iLCJ3aWR0aCIsImNzc0Z1bmMiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kIiwiYm9yZGVyUmFkaXVzIiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwibWFyZ2luIiwibGVmdCIsInRvcCIsImJvcmRlciIsInRyYW5zZm9ybSIsInVzZXJTZWxlY3QiLCJmaXJzdFJvdGF0ZSIsInN0eWxlIiwicmlnaHQiLCJib3R0b20iLCJjbGFzc05hbWUiLCJ1bmRlZmluZWQiLCJ0YXJnZXQiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsInRyYW5zZm9ybU9yaWdpbiIsImRlZ3JlZSIsImRlZ3JlZVBpZWNlIiwidHIiLCJhZGRFdmVudExpc3RlbmVyIiwid2luZG93IiwiZSIsImV2ZW50IiwiY2xpZW50WSIsInJvdGF0ZURlZ3JlZUFmdGVyIiwiZGVnVmFsdWUiLCJzZXQiLCJzTSIsInNNQyIsImxlbmd0aCIsInJvdGF0ZURlZyIsInNtVHJhbnNmb3JtIiwic3BsaXQiLCJtaW4iLCJtYXgiLCJzaXplIiwiZ2V0RWxlbWVudEJ5SWQiLCJiZ2NvbG9yIiwidG1tY29sb3IiLCJtYmdjb2xvciIsIm1ldGVyU2l6ZSIsInNjYWxlIiwibWNvbG9yIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUFpQixRQUFJRCxJQUVyQkQsRUFBYyxRQUFJQyxJQVJwQixDQVNHSyxNQUFNLFdBQ1QsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVQLFFBR25DLElBQUlDLEVBQVNJLEVBQWlCRSxHQUFZLENBQ3pDQyxFQUFHRCxFQUNIRSxHQUFHLEVBQ0hULFFBQVMsSUFVVixPQU5BVSxFQUFRSCxHQUFVSSxLQUFLVixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTTSxHQUcvREwsRUFBT1EsR0FBSSxFQUdKUixFQUFPRCxRQTBEZixPQXJEQU0sRUFBb0JNLEVBQUlGLEVBR3hCSixFQUFvQk8sRUFBSVIsRUFHeEJDLEVBQW9CUSxFQUFJLFNBQVNkLEVBQVNlLEVBQU1DLEdBQzNDVixFQUFvQlcsRUFBRWpCLEVBQVNlLElBQ2xDRyxPQUFPQyxlQUFlbkIsRUFBU2UsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFVixFQUFvQmdCLEVBQUksU0FBU3RCLEdBQ1gsb0JBQVh1QixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWVuQixFQUFTdUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLEtBUXZEbkIsRUFBb0JvQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUW5CLEVBQW9CbUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkF4QixFQUFvQmdCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPbkIsRUFBb0JRLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ2QixFQUFvQjJCLEVBQUksU0FBU2hDLEdBQ2hDLElBQUllLEVBQVNmLEdBQVVBLEVBQU8yQixXQUM3QixXQUF3QixPQUFPM0IsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUssRUFBb0JRLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJWLEVBQW9CVyxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6RzdCLEVBQW9CZ0MsRUFBSSxHQUlqQmhDLEVBQW9CQSxFQUFvQmlDLEVBQUksa0I7Ozs7czRDQ2pGOUMsSUFBTUMsRUFBTSxTQUFDQyxHQUNuQixPQUFPQSxFQUFNLE1BR0RDLEVBQU8sU0FBQ0QsR0FDcEIsT0FBT0EsRUFBTSxPQUdERSxFQUFVLFNBQUNGLEdBQ3ZCLE1BQU8sVUFBWUMsRUFBS0UsS0FBS0MsTUFBTUosSUFBUSxLQUcvQkssRUFBUyxTQUFDTCxHQUN0QixNQUFPLFNBQVdDLEVBQUtFLEtBQUtDLE1BQU1KLElBQVEsS0FJOUJNLEVBQWMsU0FBQ0MsR0FDM0IsSUFEbUMsRUFDL0JDLEVBQVksR0FEbUIsSUFFckJELEdBRnFCLElBRW5DLDJCQUFtQixDQUNsQkMsR0FEa0IsUUFDRCxLQUhpQiw4QkFLbkMsT0FBT0EsR0FHS0MsRUFBd0IsU0FBQ0MsRUFBU3BDLEdBQzlDLElBQU1xQyxFQUFRckMsRUFBTyxJQUNyQixPQUFTb0MsRUFBUUUsUUFBUUQsRUFBTyxJQUFJQyxRQUFRLE9BQVEsTTs7Ozs4c0NDMUJoQ0MsRUFnQm5CLFdBQVlDLEdBQVUsSUE4UmhCQyxFQUNBQyxFQS9SZ0IsUSw0RkFBQSx5a0JBc0JULFdBQ1gsRUFBS0MsUUFBVUMsU0FBU0MsY0FBYyxPQUN0QyxFQUFLQyxJQUFNRixTQUFTQyxjQUFjLE1BQ2xDLEVBQUtFLFlBQWNILFNBQVNDLGNBQWMsT0FDMUMsRUFBS0csZUFBaUJKLFNBQVNDLGNBQWMsT0FDN0MsRUFBS0ksUUFBVUwsU0FBU0MsY0FBYyxPQUN0QyxFQUFLSyxNQUFRTixTQUFTQyxjQUFjLE9BQ3BDLEVBQUtNLGFBQWUsR0FDcEIsRUFBS0MscUJBQXVCLEdBQzVCLEVBQUtDLFdBQWEsR0FDbEIsRUFBS0MsbUJBQXFCLE1BaENOLDhCQW1DZCxXQUVOLElBQUksR0FBSixPQUFJLEVBQWtCLEVBQWxCLEdBQWdDLENBQ2xDQyxRQUFRLEVBQ1JDLFNBQVUsV0FDVkMsTUFBT0MsTUFBQSxFQUFZLEVBQVosSUFDUEMsT0FBUUQsTUFBQSxFQUFZLEVBQVosSUFDUkUsV0FBWSxJQUFGLEtBSVosSUFBSSxHQUFKLE9BQXNCLEVBQUtqQixRQUFTLENBQ2xDWSxRQUFRLEVBQ1JNLGFBQWMsTUFDZEQsV0FBWSxJQUFGLEdBQ1ZILE1BQU9DLE1BQVksSUFBSSxHQUFKLEVBQWEsRUFBYixJQUNuQkMsT0FBUUQsTUFBWSxJQUFJLEdBQUosRUFBYSxFQUFiLEtBQ25CLGtCQU5DLEVBTWtCLEVBTmxCLElBU0osSUFBSSxHQUFKLE9BQXNCLEVBQUtaLElBQUssQ0FDOUJTLFFBQVEsRUFDUk8sU0FBVSxTQUNWRCxhQUFjLE1BQ2RMLFNBQVUsV0FDVk8sUUFBUyxFQUNUQyxPQUFRLEVBQ1JQLE1BQU9DLE1BQUEsRUFBWSxFQUFaLElBQ1BDLE9BQVFELE1BQUEsRUFBWSxFQUFaLElBQ1JPLEtBQU1QLE9BQWEsSUFBSSxHQUFTLElBQUksR0FBSixFQUFhLEVBQWIsS0FBOEIsR0FDOURRLElBQUtSLE9BQWEsSUFBSSxHQUFTLElBQUksR0FBSixFQUFhLEVBQWIsS0FBOEIsSUFDNUQsZ0JBQWlCLEVBQUtmLFNBR3pCLElBQUksR0FBSixPQUFJLEVBQXFCLEVBQXJCLElBR0osSUFBSSxHQUFKLE9BQUksRUFBbUIsRUFBbkIsSUFHSixJQUFJLEdBQUosT0FBc0IsRUFBS0ksWUFBYSxDQUN0Q1EsUUFBUSxFQUNSTSxhQUFjLE1BQ2RKLE1BQU9DLE1BQVksSUFBSSxHQUFKLEVBQWEsRUFBYixLQUEyQixFQUEzQixJQUNuQkMsT0FBUUQsTUFBWSxJQUFJLEdBQUosRUFBYSxFQUFiLEtBQTJCLEVBQTNCLElBQ3BCRSxXQUFZLElBQUYsSUFDVCxvQkFBcUIsRUFBS2pCLFNBRzdCLElBQUksR0FBSixPQUFzQixFQUFLSyxlQUFnQixDQUN6Q08sUUFBUSxFQUNSQyxTQUFVLFdBQ1ZLLGFBQWMsTUFDZEosTUFBT0MsTUFBWSxJQUFJLEdBQUosRUFBYSxFQUFiLElBQ25CQyxPQUFRRCxNQUFZLElBQUksR0FBSixFQUFhLEVBQWIsSUFDcEJFLFdBQVksZ0JBQ1pPLE9BQVFULGNBQW9CLENBQUMsUUFBU0EsT0FBYSxJQUFJLEdBQVMsSUFBSSxHQUFKLEVBQWEsRUFBYixJQUE0QixHQUFoRSxFQUFvRSxFQUFwRSxLQUM1Qk0sT0FBUSxFQUNSRSxJQUFLLE1BQ0xELEtBQU0sTUFDTkcsVUFBV1YsY0FBb0IsQ0FBQyxtQkFBb0Isc0JBQ25ELHdCQUF5QixFQUFLZixTQUdqQyxJQUFJLEdBQUosT0FBc0IsRUFBS00sUUFBUyxDQUNsQ00sUUFBUSxFQUNSYyxXQUFZLE9BQ1paLE1BQU9DLE1BQVksSUFBSSxHQUFTLEdBQ2hDQyxPQUFRRCxNQUFZLElBQUksR0FBUyxHQUNqQ0UsV0FBWSxJQUFGLEdBQ1ZDLGFBQWMsTUFDZE8sVUFBV1YsVUFBZ0IsSUFBSSxJQUFZLElBQzFDLGdCQVJDLEVBUWdCLEVBUmhCLElBV0osSUFBSSxHQUFKLE9BQXNCLEVBQUtSLE1BQU8sQ0FDaENLLFFBQVEsRUFDUkUsTUFBTyxNQUNQRSxPQUFRLE1BQ1JDLFdBQVksSUFBRixHQUNWUSxVQUFXLHFCQUNWLGdCQUFpQixFQUFLbkIsU0FHekIsSUFBSSxHQUFKLE9BQWUsRUFBS0EsU0FHcEIsSUFBTXFCLEVBQWMsSUFBSSxHQUFKLEVBQVksRUFBWixJQUEwQixJQUFJLEdBQUosRUFBVSxFQUFWLElBQzlDLElBQUksR0FBSixPQUFrQkEsR0FDbEIsRUFBS3JCLFFBQVFzQixNQUFNSCxVQUFZVixVQUFnQlksRUFBYyxJQUFJLEdBQVMsR0FDMUUsSUFBSSxHQUFlNUQsTUFBbkIsRUFBMkIsRUFBM0IsTUE3SG9CLDhCQWlJUCxXQVNiLE1BUmMsQ0FDWjhDLFNBQVUsV0FDVlUsSUFBSyxFQUNMTSxNQUFPLEVBQ1BDLE9BQVEsRUFDUlIsS0FBTSxFQUNORCxPQUFRLFdBeElVLDhCQThJSCxTQUFDNUIsRUFBU21DLEdBQXFELElBQTlDRyxFQUE4Qyw0REFBbENDLEVBQVdDLEVBQXVCLDREQUFkRCxFQUlsRSxJQUFLLElBQUkzRCxVQUhTLElBQWQwRCxJQUFzQnRDLEVBQVFzQyxVQUFZQSxHQUMxQ0gsRUFBTWhCLFNBQVFnQixFQUFRcEUsT0FBTzBFLE9BQVAsRUFBYyxFQUFkLFFBQWMsR0FBcUJOLFdBQ3REQSxFQUFNaEIsT0FDR2dCLEVBQ2RuQyxFQUFRbUMsTUFBTXZELEdBQU91RCxFQUFNdkQsUUFFZCxJQUFYNEQsR0FBbUJBLEVBQU9FLFlBQVkxQyxNQXJKdEIsOEJBd0pSLENBQ1ptQixRQUFRLEVBQ1JPLFNBQVUsU0FDVk4sU0FBVSxXQUNWQyxNQUFPLE1BQ1BFLE9BQVEsTUFDUm9CLGdCQUFpQixhQTlKRyw4QkFpS0QsQ0FDbkJ4QixRQUFRLEVBQ1JDLFNBQVUsV0FDVlMsS0FBTSxRQUNOSixhQUFjLE1BQ2RKLE1BQU8sT0FDUEUsT0FBUSxVQXZLWSw4QkEyS0EsU0FBQ3FCLEdBSXJCLElBRkEsSUFDTXRELEdBRk5zRCxFQUFVQSxFQUFTLElBQU8sRUFBSSxJQUFNQSxHQUVmLElBRFRBLEVBQVMsSUFBTSxFQUFLLEVBQUksR0FFM0J2RixFQUFJLEVBQUdBLEVBQUlpQyxFQUFLakMsSUFBSyxDQUM1QixJQUFJd0YsRUFBYyxFQUNKLEdBQVZELEdBSU9BLEdBQVUsSUFDbkJDLEVBQWMsR0FDZEQsR0FBVSxLQUVWQyxFQUFjRCxFQUNkQSxFQUFTLEdBRVgsRUFBSzdCLGFBQWExRCxHQUFLbUQsU0FBU0MsY0FBYyxNQUM5QyxFQUFLTyxxQkFBcUIzRCxHQUFLbUQsU0FBU0MsY0FBYyxPQUN0RCxJQUFJLEdBQUosT0FBc0IsRUFBS00sYUFBYTFELEdBQXBDLFNBQ0MsRUFERCxRQUVGeUUsSUFBSyxFQUNMTSxNQUFPLEVBQ1BKLFVBQVdWLGNBQW9CLENBQUNBLFVBQWdCdUIsR0FBZ0IsRUFBSyxJQUFVLEdBQUp4RixFQUFTdUYsRUFBUyxHQUFJdEIsVUFBZ0IsR0FBS3VCLE9BQ3JILGVBQWdCLEVBQUtuQyxLQUV4QixJQUFJLEdBQUosT0FBc0IsRUFBS00scUJBQXFCM0QsR0FBNUMsU0FDQyxFQURELFFBRUZtRSxXQUFZLElBQUYsR0FDVlEsVUFBV1YsU0FBZSxHQUFLdUIsS0FDOUIsd0JBQXlCLEVBQUs5QixhQUFhMUQsTUF2QjVDLEVBQUswRCxhQUFhMUQsR0FBSyxHQUN2QixFQUFLMkQscUJBQXFCM0QsR0FBSyxRQW5MZiw4QkE4TUYsU0FBQ3VGLEdBQ25CLElBQ010RCxFQUFNc0QsRUFBUyxJQURUQSxFQUFTLElBQU0sRUFBSyxFQUFJLEdBRXBDQSxFQUFVQSxFQUFTLElBQU8sRUFBSSxJQUFNQSxFQWtCcEMsSUFqQkEsSUFBSUUsRUFBSyxDQUFDLENBQ05oQixJQUFLUixNQUFZLEdBQ2pCYyxNQUFPZCxPQUFhLElBRXRCLENBQ0VRLElBQUtSLE1BQVksR0FDakJjLE1BQU9kLE1BQVksSUFFckIsQ0FDRVEsSUFBS1IsTUFBWSxHQUNqQmMsTUFBT2QsTUFBWSxJQUVyQixDQUNFUSxJQUFLUixPQUFhLEdBQ2xCYyxNQUFPZCxNQUFZLEtBR2RqRSxFQUFJLEVBQUdBLEVBQUlpQyxFQUFLakMsSUFDdkIsRUFBSzRELFdBQVc1RCxHQUFLbUQsU0FBU0MsY0FBYyxNQUM1QyxFQUFLUyxtQkFBbUI3RCxHQUFLbUQsU0FBU0MsY0FBYyxPQUNwRCxJQUFJLEdBQUosT0FBc0IsRUFBS1EsV0FBVzVELEdBQWxDLFNBQ0MsRUFERCxRQUVGMkUsVUFBV1YsY0FBb0IsQ0FBQ0EsVUFBZ0IsSUFBTSxHQUFLakUsRUFBSXVGLEVBQVMsR0FBSXRCLFVBQWdCLE9BQ3pGd0IsRUFBR3pGLElBQ0wsYUFBYyxFQUFLcUQsS0FFdEIsSUFBSSxHQUFKLE9BQXNCLEVBQUtRLG1CQUFtQjdELEdBQTFDLFNBQ0MsRUFERCxRQUVGbUUsV0FBWSxJQUFGLEdBQ1ZRLFVBQVdWLFNBQWUsTUFDekIsc0JBQXVCLEVBQUtMLFdBQVc1RCxPQWhQeEIsOEJBcVBWLFNBQUMyQyxHQUNYLElBQUksR0FBVSxHQUNkLElBQUksRUFBWSxHQUNoQkEsRUFBUStDLGlCQUFpQixZQUF6QixFQUFzQyxFQUF0QyxJQUF5RCxHQUN6REMsT0FBT0QsaUJBQWlCLGFBQWEsU0FBQ0UsR0FDcEMsSUFBSSxHQUFKLE9BQWtCQSxFQUFHakQsTUFDcEIsR0FDSGdELE9BQU9ELGlCQUFpQixVQUF4QixFQUFtQyxFQUFuQyxJQUFvRCxNQTVQaEMsNEdBaVFQLFNBQUNHLEdBQ2QsSUFBSSxHQUFVLEdBQ2QsSUFBSSxFQUFZQSxFQUFNQyxZQW5RRiw4QkF1UVAsU0FBQ0QsRUFBT2xELEdBQ3JCLEtBQUksRUFBSixHQUFpQixDQUNmLElBQ0lvRCxFQUR1QjlCLHdCQUE4QnRCLEVBQVFtQyxNQUFNSCxVQUFXLFVBQ0gsR0FBakNrQixFQUFNQyxRQUFOLEVBQWdCLEVBQWhCLElBQ3hDRSxFQUFXLElBQUgsUUFBRyxFQUFZRCxHQUFvQixJQUFELEdBQWdCLEVBQUcsSUFBSSxHQUFXLEdBQ2xGcEQsRUFBUW1DLE1BQU1ILFVBQVlWLFVBQWdCK0IsR0FDMUMsSUFBSSxFQUFZSCxFQUFNQyxTQUV0QixJQUFJLEdBQUosT0FBa0JFLEVBQVcsSUFBSSxHQUFXLEdBRTVDLElBQUksR0FBZS9FLE9BQVMsSUFBSSxHQUFKLEVBQVksRUFBWixLQUEwQitFLEVBQVcsSUFBSSxHQUFXLEdBQXJELEVBQTBELEVBQTFELEtBQXlFLEVBQXpFLE9BalJULDhCQXVSVCxTQUFDSCxHQUNaLElBQUksR0FBVSxNQXhSTSwrQkE4UmhCN0MsRUFBTXRDLE9BQU9ZLE9BQU8sTUFDcEIyQixFQUFXLEVBQ2Z2QyxPQUFPQyxlQUFlcUMsRUFBSyxRQUFTLENBQ2xDaUQsSUFBSyxTQUFDaEYsR0FDYyxLQUFkLElBQUksS0FDTixJQUFJLEdBQU1BLE1BQVFBLEdBRXBCZ0MsRUFBV2hDLEdBRWJKLElBQUssV0FDSCxPQUFPb0MsS0FHSkQsS0EzU2EsOEJBOFNQLFNBQUN1QyxHQUdkLElBRkEsSUFBTVcsRUFBSyxFQUFLdEMsV0FDVnVDLEVBQU0sRUFBS3RDLG1CQUNSN0QsRUFBSSxFQUFHQSxFQUFJLEVBQUs0RCxXQUFXd0MsT0FBUXBHLElBQUssQ0FDL0MsSUFBSXFHLEVBQVksRUFDWmQsR0FBVSxJQUNaYyxFQUFZLEdBQ1pkLEdBQVUsS0FFVmMsRUFBWWQsRUFDWkEsRUFBUyxHQUVYLElBQU1lLEVBQWNKLEVBQUdsRyxHQUFHOEUsTUFBTUgsVUFBVTRCLE1BQU0sS0FDaERMLEVBQUdsRyxHQUFHOEUsTUFBTUgsVUFBWVYsY0FBb0IsQ0FBQ3FDLEVBQVksR0FBSXJDLFVBQWdCLEdBQUtvQyxLQUNsRkYsRUFBSW5HLEdBQUc4RSxNQUFNSCxVQUFZVixTQUFlLEdBQUtvQyxPQTVUM0IsOEJBaVViLFNBQUNwRixFQUFPdUYsRUFBS0MsR0FNcEIsT0FMSXhGLEVBQVF1RixFQUNWdkYsRUFBUXVGLEVBQ0N2RixFQUFRd0YsSUFDakJ4RixFQUFRd0YsR0FFSHhGLEtBclVQLEVBQUFyQixLQUFBLEdBREFtRCxPQUF5Qm1DLElBQWJuQyxFQUEwQixHQUFLQSxHQUNyQjJELE1BQVEsS0FDOUIsRUFBQTlHLEtBQUEsRUFBZW1ELEVBQVNvQyxRQUFVaEMsU0FBU3dELGVBQWUsWUFDMUQsRUFBQS9HLEtBQUEsRUFBZ0JtRCxFQUFTNkQsU0FBVyxPQUNwQyxFQUFBaEgsS0FBQSxFQUFpQm1ELEVBQVM4RCxVQUFZLFVBQ3RDLEVBQUFqSCxLQUFBLEVBQWlCbUQsRUFBUytELFVBQVksU0FDdEMsRUFBQWxILEtBQUEsRUFBa0JtRCxFQUFTZ0UsV0FBYSxJQUN4QyxFQUFBbkgsS0FBQSxFQUFlbUQsRUFBU3dDLFFBQVUsS0FDbEMsRUFBQTNGLEtBQUEsRUFBY21ELEVBQVNpRSxPQUFTLEtBQ2hDLEVBQUFwSCxLQUFBLEVBQVltRCxFQUFTeUQsS0FBTyxHQUM1QixFQUFBNUcsS0FBQSxFQUFZbUQsRUFBUzBELEtBQU8sS0FDNUIsRUFBQTdHLEtBQUEsRUFBWW1ELEVBQVNQLEtBQU8sSUFDNUIsRUFBQTVDLEtBQUEsRUFBZW1ELEVBQVNrRSxRQUFVLFFBQ2xDLEVBQUFySCxLQUFBLEVBQWNtRCxFQUFTVSxPQUFTLFVBQ2hDLEVBQUE3RCxLQUFBLEVBQWNtRCxFQUFTOUIsT0FBVCxFQUFrQnJCLEtBQWxCLElBRWQsRUFBQUEsS0FBQSxRQUFBQSxNQUVBLEVBQUFBLEtBQUEsUUFBQUEsTyxvYkFuQ2lCa0QsRSxXQTJWRixXQUNmb0UsUUFBUUMsSUFBSSxpQiIsImZpbGUiOiJ0c3VtYW1pLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiVHN1bWFtaVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJUc3VtYW1pXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCIvLyBjc3PljZjkvY3ns7tcclxuZXhwb3J0IGNvbnN0IF9weCA9IChudW0pID0+IHtcclxuXHRyZXR1cm4gbnVtICsgXCJweFwiO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgX2RlZyA9IChudW0pID0+IHtcclxuXHRyZXR1cm4gbnVtICsgXCJkZWdcIjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IF9yb3RhdGUgPSAobnVtKSA9PiB7XHJcblx0cmV0dXJuIFwicm90YXRlKFwiICsgX2RlZyhNYXRoLmZsb29yKG51bSkpICsgXCIpXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBfc2tld1kgPSAobnVtKSA9PiB7XHJcblx0cmV0dXJuIFwic2tld1koXCIgKyBfZGVnKE1hdGguZmxvb3IobnVtKSkgKyBcIilcIjtcclxufVxyXG5cclxuLy8gY3Nz5Y+W5b6XL+S7mOS4juezu1xyXG5leHBvcnQgY29uc3QgX3doaWxlU3BhY2UgPSAob2JqKSA9PiB7XHJcblx0bGV0IHJldHVybk9iaiA9IFwiXCI7XHJcblx0Zm9yIChsZXQgdiBvZiBvYmopIHtcclxuXHRcdHJldHVybk9iaiArPSB2ICsgXCIgXCI7XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5PYmo7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBfcmV0dXJuVHJhbnNmb3JtVmFsdWUgPSAoZWxlbWVudCwgbmFtZSkgPT4ge1xyXG5cdGNvbnN0IHROYW1lID0gbmFtZSArIFwiKFwiO1xyXG5cdHJldHVybiArKGVsZW1lbnQucmVwbGFjZSh0TmFtZSwgXCJcIikucmVwbGFjZShcImRlZylcIiwgXCJcIikpO1xyXG59IiwiaW1wb3J0ICogYXMgY3NzRnVuYyBmcm9tIFwiLi9jc3NGdW5jXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUc3VtYW1pIHtcclxuICAjc2l6ZTtcclxuICAjdGFyZ2V0O1xyXG4gICNiZ2NvbG9yO1xyXG4gICN0bW1jb2xvcjtcclxuICAjbWJnY29sb3I7XHJcbiAgI21ldGVyU2l6ZTtcclxuICAjZGVncmVlO1xyXG4gICNzY2FsZTtcclxuICAjbWluO1xyXG4gICNtYXg7XHJcbiAgI29iajtcclxuICAjbWNvbG9yO1xyXG4gICNwb2ludDtcclxuICAjdmFsdWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzKSB7XHJcbiAgICBzZXR0aW5ncyA9IChzZXR0aW5ncyA9PT0gdW5kZWZpbmVkKSA/IHt9IDogc2V0dGluZ3M7XHJcbiAgICB0aGlzLiNzaXplID0gc2V0dGluZ3Muc2l6ZSB8fCAxMDA7IC8v44K144Kk44K6XHJcbiAgICB0aGlzLiN0YXJnZXQgPSBzZXR0aW5ncy50YXJnZXQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0c3VtYW1pXCIpOyAvL+OCv+ODvOOCsuODg+ODiFxyXG4gICAgdGhpcy4jYmdjb2xvciA9IHNldHRpbmdzLmJnY29sb3IgfHwgXCJyZWRcIjsgLy/og4zmma/oibJcclxuICAgIHRoaXMuI3RtbWNvbG9yID0gc2V0dGluZ3MudG1tY29sb3IgfHwgXCJ5ZWxsb3dcIjsgLy/jgaTjgb7jgb/oibJcclxuICAgIHRoaXMuI21iZ2NvbG9yID0gc2V0dGluZ3MubWJnY29sb3IgfHwgXCJibGFja1wiOyAvL+ODoeODvOOCv+ODvOiDjOaZr+iJslxyXG4gICAgdGhpcy4jbWV0ZXJTaXplID0gc2V0dGluZ3MubWV0ZXJTaXplIHx8IDEwOyAvL+ODoeODvOOCv+ODvOW5hVxyXG4gICAgdGhpcy4jZGVncmVlID0gc2V0dGluZ3MuZGVncmVlIHx8IDI3MDsgLy/jg6Hjg7zjgr/jg7zooajnpLrluYVcclxuICAgIHRoaXMuI3NjYWxlID0gc2V0dGluZ3Muc2NhbGUgfHwgMS4yOyAvL+ODoeODvOOCv+ODvOOCueOCseODvOODq1xyXG4gICAgdGhpcy4jbWluID0gc2V0dGluZ3MubWluIHx8IDA7IC8v5pyA5bCP5YCkXHJcbiAgICB0aGlzLiNtYXggPSBzZXR0aW5ncy5tYXggfHwgMTAwOyAvLyDmnIDlpKflgKRcclxuICAgIHRoaXMuI29iaiA9IHNldHRpbmdzLm9iaiB8fCBcIlwiOyAvL+WApOOCkuWPluOCi+WkieaVsFxyXG4gICAgdGhpcy4jbWNvbG9yID0gc2V0dGluZ3MubWNvbG9yIHx8IFwiYmx1ZVwiOyAvL+ODoeODvOOCv+ODvOOBruiJslxyXG4gICAgdGhpcy4jcG9pbnQgPSBzZXR0aW5ncy5wb2ludCB8fCBcInB1cnBsZVwiOyAvL+ODneOCpOODs+ODiOOBruiJslxyXG4gICAgdGhpcy4jdmFsdWUgPSBzZXR0aW5ncy52YWx1ZSB8fCB0aGlzLiNtaW47XHJcblxyXG4gICAgdGhpcy4jY3JlYXRlVGFnKCk7XHJcblxyXG4gICAgdGhpcy4jbWFpbigpO1xyXG4gIH1cclxuXHJcbiAgI2NyZWF0ZVRhZyA9ICgpID0+IHtcclxuICAgIHRoaXMubWV0ZXJiZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGhpcy5waWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG4gICAgdGhpcy5tZXRlcmJnaG9sZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGhpcy5tZXRlcmJnaG9sZW91dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGhpcy50c3VtYW1pID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aGlzLnBvaW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aGlzLnNsaWNlTWV0ZXJCZyA9IFtdO1xyXG4gICAgdGhpcy5zbGljZU1ldGVyQmdDb250ZW50cyA9IFtdO1xyXG4gICAgdGhpcy5zbGljZU1ldGVyID0gW107XHJcbiAgICB0aGlzLnNsaWNlTWV0ZXJDb250ZW50cyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgI21haW4gPSAoKSA9PiB7XHJcbiAgICAvLyDlpJbmnqBcclxuICAgIHRoaXMuI2FkZFN0eWxlRWxlbWVudCh0aGlzLiN0YXJnZXQsIHtcclxuICAgICAgY2VudGVyOiBmYWxzZSxcclxuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcclxuICAgICAgd2lkdGg6IGNzc0Z1bmMuX3B4KHRoaXMuI3NpemUpLFxyXG4gICAgICBoZWlnaHQ6IGNzc0Z1bmMuX3B4KHRoaXMuI3NpemUpLFxyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLiNiZ2NvbG9yXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg6Hjg7zjgr/jg7zog4zmma9cclxuICAgIHRoaXMuI2FkZFN0eWxlRWxlbWVudCh0aGlzLm1ldGVyYmcsIHtcclxuICAgICAgY2VudGVyOiB0cnVlLFxyXG4gICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXHJcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuI21iZ2NvbG9yLFxyXG4gICAgICB3aWR0aDogY3NzRnVuYy5fcHgodGhpcy4jc2l6ZSAvIHRoaXMuI3NjYWxlKSxcclxuICAgICAgaGVpZ2h0OiBjc3NGdW5jLl9weCh0aGlzLiNzaXplIC8gdGhpcy4jc2NhbGUpLFxyXG4gICAgfSwgXCJ0c3VtYW1pLW1ldGVyYmdcIiwgdGhpcy4jdGFyZ2V0KTtcclxuXHJcbiAgICAvLyDjg6Hjg7zjgr/jgpLpmqDjgZkgb3Ig44Oh44O844K/44O86YOo44Gu5p6gXHJcbiAgICB0aGlzLiNhZGRTdHlsZUVsZW1lbnQodGhpcy5waWUsIHtcclxuICAgICAgY2VudGVyOiBmYWxzZSxcclxuICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXHJcbiAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcclxuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcclxuICAgICAgcGFkZGluZzogMCxcclxuICAgICAgbWFyZ2luOiAwLFxyXG4gICAgICB3aWR0aDogY3NzRnVuYy5fcHgodGhpcy4jc2l6ZSksXHJcbiAgICAgIGhlaWdodDogY3NzRnVuYy5fcHgodGhpcy4jc2l6ZSksXHJcbiAgICAgIGxlZnQ6IGNzc0Z1bmMuX3B4KCh0aGlzLiNzaXplIC0gdGhpcy4jc2l6ZSAvIHRoaXMuI3NjYWxlKSAvICgtMikpLFxyXG4gICAgICB0b3A6IGNzc0Z1bmMuX3B4KCh0aGlzLiNzaXplIC0gdGhpcy4jc2l6ZSAvIHRoaXMuI3NjYWxlKSAvICgtMikpLFxyXG4gICAgfSwgXCJ0c3VtYW1pLW1ldGVyXCIsIHRoaXMubWV0ZXJiZyk7XHJcblxyXG4gICAgLy8g44Oh44O844K/44KS6Zqg44GZ5omH5b2i5L2c5oiQXHJcbiAgICB0aGlzLiNjcmVhdGVzbGljZU1ldGVyQmcodGhpcy4jZGVncmVlKTtcclxuXHJcbiAgICAvLyDjg6Hjg7zjgr/jg7zjgpLooajnpLrjgZnjgovmiYflvaLkvZzmiJDkvZzmiJBcclxuICAgIHRoaXMuI2NyZWF0ZXNsaWNlTWV0ZXIodGhpcy4jZGVncmVlKTtcclxuXHJcbiAgICAvLyDlhoXlhoZcclxuICAgIHRoaXMuI2FkZFN0eWxlRWxlbWVudCh0aGlzLm1ldGVyYmdob2xlLCB7XHJcbiAgICAgIGNlbnRlcjogdHJ1ZSxcclxuICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxyXG4gICAgICB3aWR0aDogY3NzRnVuYy5fcHgodGhpcy4jc2l6ZSAvIHRoaXMuI3NjYWxlIC0gdGhpcy4jbWV0ZXJTaXplKSxcclxuICAgICAgaGVpZ2h0OiBjc3NGdW5jLl9weCh0aGlzLiNzaXplIC8gdGhpcy4jc2NhbGUgLSB0aGlzLiNtZXRlclNpemUpLFxyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLiNiZ2NvbG9yLFxyXG4gICAgfSwgXCJ0c3VtYW1pLW1ldGVyaG9sZVwiLCB0aGlzLm1ldGVyYmcpO1xyXG5cclxuICAgIC8vIOWkluWGhlxyXG4gICAgdGhpcy4jYWRkU3R5bGVFbGVtZW50KHRoaXMubWV0ZXJiZ2hvbGVvdXQsIHtcclxuICAgICAgY2VudGVyOiBmYWxzZSxcclxuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcclxuICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxyXG4gICAgICB3aWR0aDogY3NzRnVuYy5fcHgodGhpcy4jc2l6ZSAvIHRoaXMuI3NjYWxlKSxcclxuICAgICAgaGVpZ2h0OiBjc3NGdW5jLl9weCh0aGlzLiNzaXplIC8gdGhpcy4jc2NhbGUpLFxyXG4gICAgICBiYWNrZ3JvdW5kOiBcInJnYmEoMCwwLDAsMClcIixcclxuICAgICAgYm9yZGVyOiBjc3NGdW5jLl93aGlsZVNwYWNlKFtcInNvbGlkXCIsIGNzc0Z1bmMuX3B4KCh0aGlzLiNzaXplIC0gdGhpcy4jc2l6ZSAvIHRoaXMuI3NjYWxlKSAvIDIpLCB0aGlzLiNiZ2NvbG9yXSksXHJcbiAgICAgIG1hcmdpbjogMCxcclxuICAgICAgdG9wOiBcIjUwJVwiLFxyXG4gICAgICBsZWZ0OiBcIjUwJVwiLFxyXG4gICAgICB0cmFuc2Zvcm06IGNzc0Z1bmMuX3doaWxlU3BhY2UoW1widHJhbnNsYXRlWCgtNTAlKVwiLCBcInRyYW5zbGF0ZVkoLTUwJSlcIl0pLFxyXG4gICAgfSwgXCJ0c3VtYW1pLW1ldGVyaG9sZS1vdXRcIiwgdGhpcy5tZXRlcmJnKTtcclxuXHJcbiAgICAvLyDjgaTjgb7jgb9cclxuICAgIHRoaXMuI2FkZFN0eWxlRWxlbWVudCh0aGlzLnRzdW1hbWksIHtcclxuICAgICAgY2VudGVyOiB0cnVlLFxyXG4gICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcclxuICAgICAgd2lkdGg6IGNzc0Z1bmMuX3B4KHRoaXMuI3NpemUgLyAyKSxcclxuICAgICAgaGVpZ2h0OiBjc3NGdW5jLl9weCh0aGlzLiNzaXplIC8gMiksXHJcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuI3RtbWNvbG9yLFxyXG4gICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXHJcbiAgICAgIHRyYW5zZm9ybTogY3NzRnVuYy5fcm90YXRlKHRoaXMuI2RlZ3JlZSAvIC0yKSxcclxuICAgIH0sIFwidHN1bWFtaS1pbm5lclwiLCB0aGlzLiN0YXJnZXQpO1xyXG5cclxuICAgIC8vIOmHnVxyXG4gICAgdGhpcy4jYWRkU3R5bGVFbGVtZW50KHRoaXMucG9pbnQsIHtcclxuICAgICAgY2VudGVyOiB0cnVlLFxyXG4gICAgICB3aWR0aDogXCIxMCVcIixcclxuICAgICAgaGVpZ2h0OiBcIjIwJVwiLFxyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLiNwb2ludCxcclxuICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTEwMCUpXCIsXHJcbiAgICB9LCBcInRzdW1hbWktcG9pbnRcIiwgdGhpcy50c3VtYW1pKTtcclxuXHJcbiAgICAvL+OCpOODmeODs+ODiOi/veWKoFxyXG4gICAgdGhpcy4jZXZlbnRBZGQodGhpcy50c3VtYW1pKTtcclxuXHJcbiAgICAvLyDliJ3mnJ/lgKTjgb7jgaflm57ou6JcclxuICAgIGNvbnN0IGZpcnN0Um90YXRlID0gdGhpcy4jdmFsdWUqdGhpcy4jZGVncmVlLyh0aGlzLiNtYXgtdGhpcy4jbWluKTtcclxuICAgIHRoaXMuI3JvdGF0ZU1ldGVyKGZpcnN0Um90YXRlKTtcclxuICAgIHRoaXMudHN1bWFtaS5zdHlsZS50cmFuc2Zvcm0gPSBjc3NGdW5jLl9yb3RhdGUoZmlyc3RSb3RhdGUgLSB0aGlzLiNkZWdyZWUvMik7XHJcbiAgICB0aGlzLiNvdXRwdXRPYmplY3QudmFsdWUgPSB0aGlzLiN2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8vY2VudGVyXHJcbiAgI3N0eWxlQ2VudGVyID0gKCkgPT4ge1xyXG4gICAgY29uc3Qgc3R5bGUgPSB7XHJcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXHJcbiAgICAgIHRvcDogMCxcclxuICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgIGJvdHRvbTogMCxcclxuICAgICAgbGVmdDogMCxcclxuICAgICAgbWFyZ2luOiBcImF1dG9cIixcclxuICAgIH1cclxuICAgIHJldHVybiBzdHlsZTtcclxuICB9XHJcblxyXG4gIC8vIGNzc+S7mOS4jlxyXG4gICNhZGRTdHlsZUVsZW1lbnQgPSAoZWxlbWVudCwgc3R5bGUsIGNsYXNzTmFtZSA9IHVuZGVmaW5lZCwgdGFyZ2V0ID0gdW5kZWZpbmVkKSA9PiB7XHJcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB2b2lkIDApIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gICAgaWYgKHN0eWxlLmNlbnRlcikgc3R5bGUgPSBPYmplY3QuYXNzaWduKHRoaXMuI3N0eWxlQ2VudGVyKCksIHN0eWxlKTtcclxuICAgIGRlbGV0ZSBzdHlsZS5jZW50ZXI7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gc3R5bGUpIHtcclxuICAgICAgZWxlbWVudC5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcclxuICAgIH1cclxuICAgIGlmICh0YXJnZXQgIT09IHZvaWQgMCkgdGFyZ2V0LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgI21ldGVyU3R5bGUgPSB7XHJcbiAgICBjZW50ZXI6IGZhbHNlLFxyXG4gICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXHJcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgd2lkdGg6IFwiNTAlXCIsXHJcbiAgICBoZWlnaHQ6IFwiNTAlXCIsXHJcbiAgICB0cmFuc2Zvcm1PcmlnaW46IFwiMCUgMTAwJVwiLFxyXG4gIH1cclxuXHJcbiAgI21ldGVyQ29udGVudFN0eWxlID0ge1xyXG4gICAgY2VudGVyOiBmYWxzZSxcclxuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXHJcbiAgICBsZWZ0OiBcIi0xMDAlXCIsXHJcbiAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXHJcbiAgICB3aWR0aDogXCIyMDAlXCIsXHJcbiAgICBoZWlnaHQ6IFwiMjAwJVwiLFxyXG4gIH1cclxuXHJcbiAgLy8g44Oh44O844K/44KS6Zqg44GZ5omH5b2i5L2c5oiQXHJcbiAgI2NyZWF0ZXNsaWNlTWV0ZXJCZyA9IChkZWdyZWUpID0+IHtcclxuICAgIGRlZ3JlZSA9IChkZWdyZWUgPiAzNjApID8gMCA6IDM2MCAtIGRlZ3JlZTtcclxuICAgIGNvbnN0IGJmID0gKGRlZ3JlZSAlIDkwID09IDApID8gMCA6IDE7XHJcbiAgICBjb25zdCBudW0gPSBkZWdyZWUgLyA5MCArIGJmO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07IGkrKykge1xyXG4gICAgICBsZXQgZGVncmVlUGllY2UgPSAwO1xyXG4gICAgICBpZiAoZGVncmVlID09IDApIHtcclxuICAgICAgICB0aGlzLnNsaWNlTWV0ZXJCZ1tpXSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5zbGljZU1ldGVyQmdDb250ZW50c1tpXSA9IFwiXCI7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoZGVncmVlID49IDkwKSB7XHJcbiAgICAgICAgZGVncmVlUGllY2UgPSA5MDtcclxuICAgICAgICBkZWdyZWUgLT0gOTA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGVncmVlUGllY2UgPSBkZWdyZWU7XHJcbiAgICAgICAgZGVncmVlID0gMDtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNsaWNlTWV0ZXJCZ1tpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgdGhpcy5zbGljZU1ldGVyQmdDb250ZW50c1tpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIHRoaXMuI2FkZFN0eWxlRWxlbWVudCh0aGlzLnNsaWNlTWV0ZXJCZ1tpXSwge1xyXG4gICAgICAgIC4uLnRoaXMuI21ldGVyU3R5bGUsXHJcbiAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgIHJpZ2h0OiAwLFxyXG4gICAgICAgIHRyYW5zZm9ybTogY3NzRnVuYy5fd2hpbGVTcGFjZShbY3NzRnVuYy5fcm90YXRlKGRlZ3JlZVBpZWNlIC8gKC0yKSArIDE4MCAtIGkgKiA0NSArIGRlZ3JlZSAvIDIpLCBjc3NGdW5jLl9za2V3WSgtOTAgKyBkZWdyZWVQaWVjZSldKSxcclxuICAgICAgfSwgXCJzbGljZU1ldGVyQmdcIiwgdGhpcy5waWUpO1xyXG5cclxuICAgICAgdGhpcy4jYWRkU3R5bGVFbGVtZW50KHRoaXMuc2xpY2VNZXRlckJnQ29udGVudHNbaV0sIHtcclxuICAgICAgICAuLi50aGlzLiNtZXRlckNvbnRlbnRTdHlsZSxcclxuICAgICAgICBiYWNrZ3JvdW5kOiB0aGlzLiNiZ2NvbG9yLFxyXG4gICAgICAgIHRyYW5zZm9ybTogY3NzRnVuYy5fc2tld1koOTAgLSBkZWdyZWVQaWVjZSksXHJcbiAgICAgIH0sIFwic2xpY2VNZXRlckJnLWNvbnRlbnRzXCIsIHRoaXMuc2xpY2VNZXRlckJnW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOODoeODvOOCv+ODvOS9nOaIkFxyXG4gICNjcmVhdGVzbGljZU1ldGVyID0gKGRlZ3JlZSkgPT4ge1xyXG4gICAgY29uc3QgYmYgPSAoZGVncmVlICUgOTAgPT0gMCkgPyAwIDogMTtcclxuICAgIGNvbnN0IG51bSA9IGRlZ3JlZSAvIDkwICsgYmY7XHJcbiAgICBkZWdyZWUgPSAoZGVncmVlID4gMzYwKSA/IDAgOiAzNjAgLSBkZWdyZWU7XHJcbiAgICB2YXIgdHIgPSBbe1xyXG4gICAgICAgIHRvcDogY3NzRnVuYy5fcHgoMCksXHJcbiAgICAgICAgcmlnaHQ6IGNzc0Z1bmMuX3B4KC0xKVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdG9wOiBjc3NGdW5jLl9weCgxKSxcclxuICAgICAgICByaWdodDogY3NzRnVuYy5fcHgoMClcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRvcDogY3NzRnVuYy5fcHgoMCksXHJcbiAgICAgICAgcmlnaHQ6IGNzc0Z1bmMuX3B4KDEpXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0b3A6IGNzc0Z1bmMuX3B4KC0xKSxcclxuICAgICAgICByaWdodDogY3NzRnVuYy5fcHgoMClcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XHJcbiAgICAgIHRoaXMuc2xpY2VNZXRlcltpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgdGhpcy5zbGljZU1ldGVyQ29udGVudHNbaV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICB0aGlzLiNhZGRTdHlsZUVsZW1lbnQodGhpcy5zbGljZU1ldGVyW2ldLCB7XHJcbiAgICAgICAgLi4udGhpcy4jbWV0ZXJTdHlsZSxcclxuICAgICAgICB0cmFuc2Zvcm06IGNzc0Z1bmMuX3doaWxlU3BhY2UoW2Nzc0Z1bmMuX3JvdGF0ZSgxODAgKyA5MCAqIGkgKyBkZWdyZWUgLyAyKSwgY3NzRnVuYy5fc2tld1koLTkwKV0pLFxyXG4gICAgICAgIC4uLnRyW2ldXHJcbiAgICAgIH0sIFwic2xpY2VNZXRlclwiLCB0aGlzLnBpZSk7XHJcblxyXG4gICAgICB0aGlzLiNhZGRTdHlsZUVsZW1lbnQodGhpcy5zbGljZU1ldGVyQ29udGVudHNbaV0sIHtcclxuICAgICAgICAuLi50aGlzLiNtZXRlckNvbnRlbnRTdHlsZSxcclxuICAgICAgICBiYWNrZ3JvdW5kOiB0aGlzLiNtY29sb3IsXHJcbiAgICAgICAgdHJhbnNmb3JtOiBjc3NGdW5jLl9za2V3WSg5MCksXHJcbiAgICAgIH0sIFwic2xpY2VNZXRlci1jb250ZW50c1wiLCB0aGlzLnNsaWNlTWV0ZXJbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g44Oe44Km44K55pON5L2cXHJcbiAgI2V2ZW50QWRkID0gKGVsZW1lbnQpID0+IHtcclxuICAgIHRoaXMuI2NsaWNrID0gZmFsc2U7XHJcbiAgICB0aGlzLiNtZW1vcnlZID0gMDtcclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy4jT25Nb3VzZURvd24sIGZhbHNlKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xyXG4gICAgICB0aGlzLiNPbk1vdXNlTW92ZShlLCBlbGVtZW50KVxyXG4gICAgfSwgZmFsc2UpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLiNPbk1vdXNlVXAsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gICNjbGljaztcclxuICAjbWVtb3J5WTtcclxuICAjT25Nb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgIHRoaXMuI2NsaWNrID0gdHJ1ZTtcclxuICAgIHRoaXMuI21lbW9yeVkgPSBldmVudC5jbGllbnRZO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJNb3VzZURvd25cIik7XHJcbiAgfVxyXG5cclxuICAjT25Nb3VzZU1vdmUgPSAoZXZlbnQsIGVsZW1lbnQpID0+IHtcclxuICAgIGlmICh0aGlzLiNjbGljaykge1xyXG4gICAgICBjb25zdCByb3RhdGVEZWdyZWVCZWZvcmUgPSBjc3NGdW5jLl9yZXR1cm5UcmFuc2Zvcm1WYWx1ZShlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSwgXCJyb3RhdGVcIik7XHJcbiAgICAgIGxldCByb3RhdGVEZWdyZWVBZnRlciA9IHJvdGF0ZURlZ3JlZUJlZm9yZSArIChldmVudC5jbGllbnRZIC0gdGhpcy4jbWVtb3J5WSkgKiAzO1xyXG4gICAgICBjb25zdCBkZWdWYWx1ZSA9IHRoaXMuI2xpbWl0KHJvdGF0ZURlZ3JlZUFmdGVyLCAtdGhpcy4jZGVncmVlIC8gMiwgdGhpcy4jZGVncmVlIC8gMik7XHJcbiAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gY3NzRnVuYy5fcm90YXRlKGRlZ1ZhbHVlKTtcclxuICAgICAgdGhpcy4jbWVtb3J5WSA9IGV2ZW50LmNsaWVudFk7XHJcblxyXG4gICAgICB0aGlzLiNyb3RhdGVNZXRlcihkZWdWYWx1ZSArIHRoaXMuI2RlZ3JlZSAvIDIpO1xyXG5cclxuICAgICAgdGhpcy4jb3V0cHV0T2JqZWN0LnZhbHVlID0gKHRoaXMuI21heCAtIHRoaXMuI21pbikgKiAoZGVnVmFsdWUgKyB0aGlzLiNkZWdyZWUgLyAyKSAvIHRoaXMuI2RlZ3JlZSArIHRoaXMuI21pbjtcclxuXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiTW91c2VNb3ZlXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgI09uTW91c2VVcCA9IChldmVudCkgPT4ge1xyXG4gICAgdGhpcy4jY2xpY2sgPSBmYWxzZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiTW91c2VVcFwiKTtcclxuICB9XHJcblxyXG4gIC8v44Kq44OW44K444Kn44Kv44OI44Gr5YCk44KS44K744OD44OIXHJcbiAgI291dHB1dE9iamVjdCA9ICgoKSA9PiB7XHJcbiAgICB2YXIgdmFsID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHZhciBtZW1WYWx1ZSA9IDA7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsLCAndmFsdWUnLCB7XHJcbiAgICAgIHNldDogKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuI29iaiAhPT0gXCJcIikge1xyXG4gICAgICAgICAgdGhpcy4jb2JqLnZhbHVlID0gdmFsdWU7IC8v44K744OD44OIXHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lbVZhbHVlID0gdmFsdWU7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdldDogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBtZW1WYWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIH0pKCk7XHJcblxyXG4gICNyb3RhdGVNZXRlciA9IChkZWdyZWUpID0+IHtcclxuICAgIGNvbnN0IHNNID0gdGhpcy5zbGljZU1ldGVyO1xyXG4gICAgY29uc3Qgc01DID0gdGhpcy5zbGljZU1ldGVyQ29udGVudHM7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2xpY2VNZXRlci5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgcm90YXRlRGVnID0gMDtcclxuICAgICAgaWYgKGRlZ3JlZSA+PSA5MCkge1xyXG4gICAgICAgIHJvdGF0ZURlZyA9IDkwO1xyXG4gICAgICAgIGRlZ3JlZSAtPSA5MDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByb3RhdGVEZWcgPSBkZWdyZWU7XHJcbiAgICAgICAgZGVncmVlID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBzbVRyYW5zZm9ybSA9IHNNW2ldLnN0eWxlLnRyYW5zZm9ybS5zcGxpdChcIiBcIik7XHJcbiAgICAgIHNNW2ldLnN0eWxlLnRyYW5zZm9ybSA9IGNzc0Z1bmMuX3doaWxlU3BhY2UoW3NtVHJhbnNmb3JtWzBdLCBjc3NGdW5jLl9za2V3WSgtOTAgKyByb3RhdGVEZWcpXSk7XHJcbiAgICAgIHNNQ1tpXS5zdHlsZS50cmFuc2Zvcm0gPSBjc3NGdW5jLl9za2V3WSg5MCAtIHJvdGF0ZURlZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyDjgZ3jga7ku5bplqLmlbBcclxuICAjbGltaXQgPSAodmFsdWUsIG1pbiwgbWF4KSA9PiB7XHJcbiAgICBpZiAodmFsdWUgPCBtaW4pIHtcclxuICAgICAgdmFsdWUgPSBtaW47XHJcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gbWF4KSB7XHJcbiAgICAgIHZhbHVlID0gbWF4O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8g44OG44K544OI44Ot44KwXHJcbiAgc3RhdGljIHRlc3Rsb2cgPSAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcInRlc3Rsb2dcIik7XHJcbiAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==